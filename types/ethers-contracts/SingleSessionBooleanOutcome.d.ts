/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface SingleSessionBooleanOutcomeInterface extends Interface {
  functions: {
    getOutcome: TypedFunctionDescription<{
      encode([_query]: [Arrayish]): string;
    }>;

    getSeqNum: TypedFunctionDescription<{ encode([]: []): string }>;

    getStatus: TypedFunctionDescription<{ encode([]: []): string }>;

    intendSettle: TypedFunctionDescription<{
      encode([_stateProof]: [Arrayish]): string;
    }>;

    isFinalized: TypedFunctionDescription<{
      encode([_query]: [Arrayish]): string;
    }>;
  };

  events: {
    IntendSettle: TypedEventDescription<{
      encodeTopics([seq]: [null]): string[];
    }>;
  };
}

export class SingleSessionBooleanOutcome extends Contract {
  connect(
    signerOrProvider: Signer | Provider | string
  ): SingleSessionBooleanOutcome;
  attach(addressOrName: string): SingleSessionBooleanOutcome;
  deployed(): Promise<SingleSessionBooleanOutcome>;

  on(
    event: EventFilter | string,
    listener: Listener
  ): SingleSessionBooleanOutcome;
  once(
    event: EventFilter | string,
    listener: Listener
  ): SingleSessionBooleanOutcome;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): SingleSessionBooleanOutcome;
  removeAllListeners(
    eventName: EventFilter | string
  ): SingleSessionBooleanOutcome;
  removeListener(
    eventName: any,
    listener: Listener
  ): SingleSessionBooleanOutcome;

  interface: SingleSessionBooleanOutcomeInterface;

  functions: {
    getOutcome(_query: Arrayish): Promise<boolean>;

    getSeqNum(): Promise<BigNumber>;

    getStatus(): Promise<number>;

    intendSettle(
      _stateProof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isFinalized(_query: Arrayish): Promise<boolean>;
  };

  getOutcome(_query: Arrayish): Promise<boolean>;

  getSeqNum(): Promise<BigNumber>;

  getStatus(): Promise<number>;

  intendSettle(
    _stateProof: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isFinalized(_query: Arrayish): Promise<boolean>;

  filters: {
    IntendSettle(seq: null): EventFilter;
  };

  estimate: {
    getOutcome(_query: Arrayish): Promise<BigNumber>;

    getSeqNum(): Promise<BigNumber>;

    getStatus(): Promise<BigNumber>;

    intendSettle(_stateProof: Arrayish): Promise<BigNumber>;

    isFinalized(_query: Arrayish): Promise<BigNumber>;
  };
}
