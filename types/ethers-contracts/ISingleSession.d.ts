/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ISingleSessionInterface extends Interface {
  functions: {
    intendSettle: TypedFunctionDescription<{
      encode([_stateProof]: [Arrayish]): string;
    }>;

    getStatus: TypedFunctionDescription<{ encode([]: []): string }>;

    getSeqNum: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    IntendSettle: TypedEventDescription<{
      encodeTopics([seq]: [null]): string[];
    }>;
  };
}

export class ISingleSession extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ISingleSession;
  attach(addressOrName: string): ISingleSession;
  deployed(): Promise<ISingleSession>;

  on(event: EventFilter | string, listener: Listener): ISingleSession;
  once(event: EventFilter | string, listener: Listener): ISingleSession;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): ISingleSession;
  removeAllListeners(eventName: EventFilter | string): ISingleSession;
  removeListener(eventName: any, listener: Listener): ISingleSession;

  interface: ISingleSessionInterface;

  functions: {
    intendSettle(
      _stateProof: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getStatus(): Promise<number>;

    getSeqNum(): Promise<BigNumber>;
  };

  intendSettle(
    _stateProof: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getStatus(): Promise<number>;

  getSeqNum(): Promise<BigNumber>;

  filters: {
    IntendSettle(seq: null): EventFilter;
  };

  estimate: {
    intendSettle(_stateProof: Arrayish): Promise<BigNumber>;

    getStatus(): Promise<BigNumber>;

    getSeqNum(): Promise<BigNumber>;
  };
}
