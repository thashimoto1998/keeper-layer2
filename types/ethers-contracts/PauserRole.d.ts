/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PauserRoleInterface extends Interface {
  functions: {
    isPauser: TypedFunctionDescription<{ encode([account]: [string]): string }>;

    addPauser: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    renouncePauser: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    PauserAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    PauserRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;
  };
}

export class PauserRole extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PauserRole;
  attach(addressOrName: string): PauserRole;
  deployed(): Promise<PauserRole>;

  on(event: EventFilter | string, listener: Listener): PauserRole;
  once(event: EventFilter | string, listener: Listener): PauserRole;
  addListener(eventName: EventFilter | string, listener: Listener): PauserRole;
  removeAllListeners(eventName: EventFilter | string): PauserRole;
  removeListener(eventName: any, listener: Listener): PauserRole;

  interface: PauserRoleInterface;

  functions: {
    isPauser(account: string): Promise<boolean>;

    addPauser(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  isPauser(account: string): Promise<boolean>;

  addPauser(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    PauserAdded(account: string | null): EventFilter;

    PauserRemoved(account: string | null): EventFilter;
  };

  estimate: {
    isPauser(account: string): Promise<BigNumber>;

    addPauser(account: string): Promise<BigNumber>;

    renouncePauser(): Promise<BigNumber>;
  };
}
