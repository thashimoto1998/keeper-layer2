/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, Signer } from "ethers";
import { Provider } from "ethers/providers";

import { SingleSessionApp } from "./SingleSessionApp";

export class SingleSessionAppFactory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SingleSessionApp {
    return new Contract(address, _abi, signerOrProvider) as SingleSessionApp;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_players",
        type: "address[]"
      },
      {
        internalType: "uint256",
        name: "_nonce",
        type: "uint256"
      },
      {
        internalType: "uint256",
        name: "_timeout",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "seq",
        type: "uint256"
      }
    ],
    name: "IntendSettle",
    type: "event"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes",
        name: "_stateProof",
        type: "bytes"
      }
    ],
    name: "intendSettle",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "getStatus",
    outputs: [
      {
        internalType: "enum ISingleSession.AppStatus",
        name: "",
        type: "uint8"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "getSeqNum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];
