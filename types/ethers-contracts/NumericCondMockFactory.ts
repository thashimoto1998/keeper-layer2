/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractFactory, Signer } from "ethers";
import { Provider } from "ethers/providers";
import { UnsignedTransaction } from "ethers/utils/transaction";

import { NumericCondMock } from "./NumericCondMock";

export class NumericCondMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(): Promise<NumericCondMock> {
    return super.deploy() as Promise<NumericCondMock>;
  }
  getDeployTransaction(): UnsignedTransaction {
    return super.getDeployTransaction();
  }
  attach(address: string): NumericCondMock {
    return super.attach(address) as NumericCondMock;
  }
  connect(signer: Signer): NumericCondMockFactory {
    return super.connect(signer) as NumericCondMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NumericCondMock {
    return new Contract(address, _abi, signerOrProvider) as NumericCondMock;
  }
}

const _abi = [
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes",
        name: "_query",
        type: "bytes"
      }
    ],
    name: "isFinalized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes",
        name: "_query",
        type: "bytes"
      }
    ],
    name: "getOutcome",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101f0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063bcdbda941461003b578063ea4ba8eb146100bf575b600080fd5b6100ab6004803603602081101561005157600080fd5b81019060208101813564010000000081111561006c57600080fd5b82018360208201111561007e57600080fd5b803590602001918460018302840111640100000000831117156100a057600080fd5b509092509050610141565b604080519115158252519081900360200190f35b61012f600480360360208110156100d557600080fd5b8101906020810181356401000000008111156100f057600080fd5b82018360208201111561010257600080fd5b8035906020019184600183028401116401000000008311171561012457600080fd5b509092509050610149565b60408051918252519081900360200190f35b600192915050565b600061018a83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061019192505050565b9392505050565b60008151600014156101a5575060006101b6565b5060208181015182519091036008021c5b91905056fea265627a7a7231582062872e08f0a7670cb2f1fa1a99b668726b2905d392e7a09d5d54438cfcf2a21064736f6c634300050c0032";
