/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface CelerLedgerMockInterface extends Interface {
  functions: {
    tmpChannelId: TypedFunctionDescription<{ encode([]: []): string }>;

    tmpChannelIds: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    openChannelMockSet: TypedFunctionDescription<{
      encode([
        _channelId,
        _disputeTimeout,
        _tokenAddress,
        _tokenType,
        _peerAddrs,
        _deposits
      ]: [
        Arrayish,
        BigNumberish,
        string,
        BigNumberish,
        string[],
        BigNumberish[]
      ]): string;
    }>;

    openChannel: TypedFunctionDescription<{
      encode([_openRequest]: [Arrayish]): string;
    }>;

    deposit: TypedFunctionDescription<{
      encode([_channelId, _receiver, _transferFromAmount]: [
        Arrayish,
        string,
        BigNumberish
      ]): string;
    }>;

    snapshotStatesMockSet: TypedFunctionDescription<{
      encode([
        _channelIds,
        _peerFroms,
        _seqNums,
        _transferOuts,
        _pendingPayOuts
      ]: [
        Arrayish[],
        string[],
        BigNumberish[],
        BigNumberish[],
        BigNumberish[]
      ]): string;
    }>;

    snapshotStates: TypedFunctionDescription<{
      encode([_signedSimplexStateArray]: [Arrayish]): string;
    }>;

    intendWithdrawMockSet: TypedFunctionDescription<{
      encode([_channelId, _amount, _recipientChannelId, _receiver]: [
        Arrayish,
        BigNumberish,
        Arrayish,
        string
      ]): string;
    }>;

    intendWithdraw: TypedFunctionDescription<{
      encode([_channelId, _amount, _recipientChannelId]: [
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    confirmWithdraw: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    vetoWithdraw: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    intendSettleMockSet: TypedFunctionDescription<{
      encode([
        _channelId,
        _peerFrom,
        _seqNum,
        _transferOut,
        _nextPayIdListHash,
        _lastPayResolveDeadline,
        _pendingPayOut
      ]: [
        Arrayish,
        string,
        BigNumberish,
        BigNumberish,
        Arrayish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    intendSettle: TypedFunctionDescription<{
      encode([_signedSimplexStateArray]: [Arrayish]): string;
    }>;

    intendSettleRevert: TypedFunctionDescription<{
      encode([_signedSimplexStateArray]: [Arrayish]): string;
    }>;

    confirmSettle: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getSettleFinalizedTime: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getTokenContract: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getTokenType: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getChannelStatus: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getCooperativeWithdrawSeqNum: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getTotalBalance: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getBalanceMap: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getChannelMigrationArgs: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getPeersMigrationInfo: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getDisputeTimeout: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getMigratedTo: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getStateSeqNumMap: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getTransferOutMap: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getNextPayIdListHashMap: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getLastPayResolveDeadlineMap: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getPendingPayOutMap: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getWithdrawIntent: TypedFunctionDescription<{
      encode([_channelId]: [Arrayish]): string;
    }>;

    getChannelStatusNum: TypedFunctionDescription<{
      encode([_channelStatus]: [BigNumberish]): string;
    }>;

    getEthPool: TypedFunctionDescription<{ encode([]: []): string }>;

    getPayRegistry: TypedFunctionDescription<{ encode([]: []): string }>;

    getCelerWallet: TypedFunctionDescription<{ encode([]: []): string }>;

    getBalanceLimit: TypedFunctionDescription<{
      encode([_tokenAddr]: [string]): string;
    }>;

    getBalanceLimitsEnabled: TypedFunctionDescription<{
      encode([]: []): string;
    }>;
  };

  events: {
    ClearOnePay: TypedEventDescription<{
      encodeTopics([channelId, payId, peerFrom, amount]: [
        Arrayish | null,
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;

    ConfirmSettle: TypedEventDescription<{
      encodeTopics([channelId, settleBalance]: [
        Arrayish | null,
        null
      ]): string[];
    }>;

    ConfirmSettleFail: TypedEventDescription<{
      encodeTopics([channelId]: [Arrayish | null]): string[];
    }>;

    ConfirmWithdraw: TypedEventDescription<{
      encodeTopics([
        channelId,
        withdrawnAmount,
        receiver,
        recipientChannelId,
        deposits,
        withdrawals
      ]: [
        Arrayish | null,
        null,
        string | null,
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    CooperativeSettle: TypedEventDescription<{
      encodeTopics([channelId, settleBalance]: [
        Arrayish | null,
        null
      ]): string[];
    }>;

    CooperativeWithdraw: TypedEventDescription<{
      encodeTopics([
        channelId,
        withdrawnAmount,
        receiver,
        recipientChannelId,
        deposits,
        withdrawals,
        seqNum
      ]: [
        Arrayish | null,
        null,
        string | null,
        Arrayish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    Deposit: TypedEventDescription<{
      encodeTopics([channelId, peerAddrs, deposits, withdrawals]: [
        Arrayish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    IntendSettle: TypedEventDescription<{
      encodeTopics([channelId, seqNums]: [Arrayish | null, null]): string[];
    }>;

    IntendWithdraw: TypedEventDescription<{
      encodeTopics([channelId, receiver, amount]: [
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;

    OpenChannel: TypedEventDescription<{
      encodeTopics([
        channelId,
        tokenType,
        tokenAddress,
        peerAddrs,
        initialDeposits
      ]: [Arrayish | null, null, string | null, null, null]): string[];
    }>;

    SnapshotStates: TypedEventDescription<{
      encodeTopics([channelId, seqNums]: [Arrayish | null, null]): string[];
    }>;

    VetoWithdraw: TypedEventDescription<{
      encodeTopics([channelId]: [Arrayish | null]): string[];
    }>;
  };
}

export class CelerLedgerMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): CelerLedgerMock;
  attach(addressOrName: string): CelerLedgerMock;
  deployed(): Promise<CelerLedgerMock>;

  on(event: EventFilter | string, listener: Listener): CelerLedgerMock;
  once(event: EventFilter | string, listener: Listener): CelerLedgerMock;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): CelerLedgerMock;
  removeAllListeners(eventName: EventFilter | string): CelerLedgerMock;
  removeListener(eventName: any, listener: Listener): CelerLedgerMock;

  interface: CelerLedgerMockInterface;

  functions: {
    tmpChannelId(): Promise<string>;

    tmpChannelIds(arg0: BigNumberish): Promise<string>;

    openChannelMockSet(
      _channelId: Arrayish,
      _disputeTimeout: BigNumberish,
      _tokenAddress: string,
      _tokenType: BigNumberish,
      _peerAddrs: string[],
      _deposits: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    openChannel(
      _openRequest: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deposit(
      _channelId: Arrayish,
      _receiver: string,
      _transferFromAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    snapshotStatesMockSet(
      _channelIds: Arrayish[],
      _peerFroms: string[],
      _seqNums: BigNumberish[],
      _transferOuts: BigNumberish[],
      _pendingPayOuts: BigNumberish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    snapshotStates(
      _signedSimplexStateArray: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    intendWithdrawMockSet(
      _channelId: Arrayish,
      _amount: BigNumberish,
      _recipientChannelId: Arrayish,
      _receiver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    intendWithdraw(
      _channelId: Arrayish,
      _amount: BigNumberish,
      _recipientChannelId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    confirmWithdraw(
      _channelId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    vetoWithdraw(
      _channelId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    intendSettleMockSet(
      _channelId: Arrayish,
      _peerFrom: string,
      _seqNum: BigNumberish,
      _transferOut: BigNumberish,
      _nextPayIdListHash: Arrayish,
      _lastPayResolveDeadline: BigNumberish,
      _pendingPayOut: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    intendSettle(
      _signedSimplexStateArray: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    intendSettleRevert(
      _signedSimplexStateArray: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    confirmSettle(
      _channelId: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getSettleFinalizedTime(_channelId: Arrayish): Promise<BigNumber>;

    getTokenContract(_channelId: Arrayish): Promise<string>;

    getTokenType(_channelId: Arrayish): Promise<number>;

    getChannelStatus(_channelId: Arrayish): Promise<number>;

    getCooperativeWithdrawSeqNum(_channelId: Arrayish): Promise<BigNumber>;

    getTotalBalance(_channelId: Arrayish): Promise<BigNumber>;

    getBalanceMap(
      _channelId: Arrayish
    ): Promise<{
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
    }>;

    getChannelMigrationArgs(
      _channelId: Arrayish
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: BigNumber;
    }>;

    getPeersMigrationInfo(
      _channelId: Arrayish
    ): Promise<{
      0: string[];
      1: BigNumber[];
      2: BigNumber[];
      3: BigNumber[];
      4: BigNumber[];
      5: BigNumber[];
    }>;

    getDisputeTimeout(_channelId: Arrayish): Promise<BigNumber>;

    getMigratedTo(_channelId: Arrayish): Promise<string>;

    getStateSeqNumMap(
      _channelId: Arrayish
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;

    getTransferOutMap(
      _channelId: Arrayish
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;

    getNextPayIdListHashMap(
      _channelId: Arrayish
    ): Promise<{
      0: string[];
      1: string[];
    }>;

    getLastPayResolveDeadlineMap(
      _channelId: Arrayish
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;

    getPendingPayOutMap(
      _channelId: Arrayish
    ): Promise<{
      0: string[];
      1: BigNumber[];
    }>;

    getWithdrawIntent(
      _channelId: Arrayish
    ): Promise<{
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    getChannelStatusNum(_channelStatus: BigNumberish): Promise<BigNumber>;

    getEthPool(): Promise<string>;

    getPayRegistry(): Promise<string>;

    getCelerWallet(): Promise<string>;

    getBalanceLimit(_tokenAddr: string): Promise<BigNumber>;

    getBalanceLimitsEnabled(): Promise<boolean>;
  };

  tmpChannelId(): Promise<string>;

  tmpChannelIds(arg0: BigNumberish): Promise<string>;

  openChannelMockSet(
    _channelId: Arrayish,
    _disputeTimeout: BigNumberish,
    _tokenAddress: string,
    _tokenType: BigNumberish,
    _peerAddrs: string[],
    _deposits: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  openChannel(
    _openRequest: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deposit(
    _channelId: Arrayish,
    _receiver: string,
    _transferFromAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  snapshotStatesMockSet(
    _channelIds: Arrayish[],
    _peerFroms: string[],
    _seqNums: BigNumberish[],
    _transferOuts: BigNumberish[],
    _pendingPayOuts: BigNumberish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  snapshotStates(
    _signedSimplexStateArray: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  intendWithdrawMockSet(
    _channelId: Arrayish,
    _amount: BigNumberish,
    _recipientChannelId: Arrayish,
    _receiver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  intendWithdraw(
    _channelId: Arrayish,
    _amount: BigNumberish,
    _recipientChannelId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  confirmWithdraw(
    _channelId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  vetoWithdraw(
    _channelId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  intendSettleMockSet(
    _channelId: Arrayish,
    _peerFrom: string,
    _seqNum: BigNumberish,
    _transferOut: BigNumberish,
    _nextPayIdListHash: Arrayish,
    _lastPayResolveDeadline: BigNumberish,
    _pendingPayOut: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  intendSettle(
    _signedSimplexStateArray: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  intendSettleRevert(
    _signedSimplexStateArray: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  confirmSettle(
    _channelId: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getSettleFinalizedTime(_channelId: Arrayish): Promise<BigNumber>;

  getTokenContract(_channelId: Arrayish): Promise<string>;

  getTokenType(_channelId: Arrayish): Promise<number>;

  getChannelStatus(_channelId: Arrayish): Promise<number>;

  getCooperativeWithdrawSeqNum(_channelId: Arrayish): Promise<BigNumber>;

  getTotalBalance(_channelId: Arrayish): Promise<BigNumber>;

  getBalanceMap(
    _channelId: Arrayish
  ): Promise<{
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
  }>;

  getChannelMigrationArgs(
    _channelId: Arrayish
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: BigNumber;
  }>;

  getPeersMigrationInfo(
    _channelId: Arrayish
  ): Promise<{
    0: string[];
    1: BigNumber[];
    2: BigNumber[];
    3: BigNumber[];
    4: BigNumber[];
    5: BigNumber[];
  }>;

  getDisputeTimeout(_channelId: Arrayish): Promise<BigNumber>;

  getMigratedTo(_channelId: Arrayish): Promise<string>;

  getStateSeqNumMap(
    _channelId: Arrayish
  ): Promise<{
    0: string[];
    1: BigNumber[];
  }>;

  getTransferOutMap(
    _channelId: Arrayish
  ): Promise<{
    0: string[];
    1: BigNumber[];
  }>;

  getNextPayIdListHashMap(
    _channelId: Arrayish
  ): Promise<{
    0: string[];
    1: string[];
  }>;

  getLastPayResolveDeadlineMap(
    _channelId: Arrayish
  ): Promise<{
    0: string[];
    1: BigNumber[];
  }>;

  getPendingPayOutMap(
    _channelId: Arrayish
  ): Promise<{
    0: string[];
    1: BigNumber[];
  }>;

  getWithdrawIntent(
    _channelId: Arrayish
  ): Promise<{
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  getChannelStatusNum(_channelStatus: BigNumberish): Promise<BigNumber>;

  getEthPool(): Promise<string>;

  getPayRegistry(): Promise<string>;

  getCelerWallet(): Promise<string>;

  getBalanceLimit(_tokenAddr: string): Promise<BigNumber>;

  getBalanceLimitsEnabled(): Promise<boolean>;

  filters: {
    ClearOnePay(
      channelId: Arrayish | null,
      payId: Arrayish | null,
      peerFrom: string | null,
      amount: null
    ): EventFilter;

    ConfirmSettle(channelId: Arrayish | null, settleBalance: null): EventFilter;

    ConfirmSettleFail(channelId: Arrayish | null): EventFilter;

    ConfirmWithdraw(
      channelId: Arrayish | null,
      withdrawnAmount: null,
      receiver: string | null,
      recipientChannelId: Arrayish | null,
      deposits: null,
      withdrawals: null
    ): EventFilter;

    CooperativeSettle(
      channelId: Arrayish | null,
      settleBalance: null
    ): EventFilter;

    CooperativeWithdraw(
      channelId: Arrayish | null,
      withdrawnAmount: null,
      receiver: string | null,
      recipientChannelId: Arrayish | null,
      deposits: null,
      withdrawals: null,
      seqNum: null
    ): EventFilter;

    Deposit(
      channelId: Arrayish | null,
      peerAddrs: null,
      deposits: null,
      withdrawals: null
    ): EventFilter;

    IntendSettle(channelId: Arrayish | null, seqNums: null): EventFilter;

    IntendWithdraw(
      channelId: Arrayish | null,
      receiver: string | null,
      amount: null
    ): EventFilter;

    OpenChannel(
      channelId: Arrayish | null,
      tokenType: null,
      tokenAddress: string | null,
      peerAddrs: null,
      initialDeposits: null
    ): EventFilter;

    SnapshotStates(channelId: Arrayish | null, seqNums: null): EventFilter;

    VetoWithdraw(channelId: Arrayish | null): EventFilter;
  };

  estimate: {
    tmpChannelId(): Promise<BigNumber>;

    tmpChannelIds(arg0: BigNumberish): Promise<BigNumber>;

    openChannelMockSet(
      _channelId: Arrayish,
      _disputeTimeout: BigNumberish,
      _tokenAddress: string,
      _tokenType: BigNumberish,
      _peerAddrs: string[],
      _deposits: BigNumberish[]
    ): Promise<BigNumber>;

    openChannel(_openRequest: Arrayish): Promise<BigNumber>;

    deposit(
      _channelId: Arrayish,
      _receiver: string,
      _transferFromAmount: BigNumberish
    ): Promise<BigNumber>;

    snapshotStatesMockSet(
      _channelIds: Arrayish[],
      _peerFroms: string[],
      _seqNums: BigNumberish[],
      _transferOuts: BigNumberish[],
      _pendingPayOuts: BigNumberish[]
    ): Promise<BigNumber>;

    snapshotStates(_signedSimplexStateArray: Arrayish): Promise<BigNumber>;

    intendWithdrawMockSet(
      _channelId: Arrayish,
      _amount: BigNumberish,
      _recipientChannelId: Arrayish,
      _receiver: string
    ): Promise<BigNumber>;

    intendWithdraw(
      _channelId: Arrayish,
      _amount: BigNumberish,
      _recipientChannelId: Arrayish
    ): Promise<BigNumber>;

    confirmWithdraw(_channelId: Arrayish): Promise<BigNumber>;

    vetoWithdraw(_channelId: Arrayish): Promise<BigNumber>;

    intendSettleMockSet(
      _channelId: Arrayish,
      _peerFrom: string,
      _seqNum: BigNumberish,
      _transferOut: BigNumberish,
      _nextPayIdListHash: Arrayish,
      _lastPayResolveDeadline: BigNumberish,
      _pendingPayOut: BigNumberish
    ): Promise<BigNumber>;

    intendSettle(_signedSimplexStateArray: Arrayish): Promise<BigNumber>;

    intendSettleRevert(_signedSimplexStateArray: Arrayish): Promise<BigNumber>;

    confirmSettle(_channelId: Arrayish): Promise<BigNumber>;

    getSettleFinalizedTime(_channelId: Arrayish): Promise<BigNumber>;

    getTokenContract(_channelId: Arrayish): Promise<BigNumber>;

    getTokenType(_channelId: Arrayish): Promise<BigNumber>;

    getChannelStatus(_channelId: Arrayish): Promise<BigNumber>;

    getCooperativeWithdrawSeqNum(_channelId: Arrayish): Promise<BigNumber>;

    getTotalBalance(_channelId: Arrayish): Promise<BigNumber>;

    getBalanceMap(_channelId: Arrayish): Promise<BigNumber>;

    getChannelMigrationArgs(_channelId: Arrayish): Promise<BigNumber>;

    getPeersMigrationInfo(_channelId: Arrayish): Promise<BigNumber>;

    getDisputeTimeout(_channelId: Arrayish): Promise<BigNumber>;

    getMigratedTo(_channelId: Arrayish): Promise<BigNumber>;

    getStateSeqNumMap(_channelId: Arrayish): Promise<BigNumber>;

    getTransferOutMap(_channelId: Arrayish): Promise<BigNumber>;

    getNextPayIdListHashMap(_channelId: Arrayish): Promise<BigNumber>;

    getLastPayResolveDeadlineMap(_channelId: Arrayish): Promise<BigNumber>;

    getPendingPayOutMap(_channelId: Arrayish): Promise<BigNumber>;

    getWithdrawIntent(_channelId: Arrayish): Promise<BigNumber>;

    getChannelStatusNum(_channelStatus: BigNumberish): Promise<BigNumber>;

    getEthPool(): Promise<BigNumber>;

    getPayRegistry(): Promise<BigNumber>;

    getCelerWallet(): Promise<BigNumber>;

    getBalanceLimit(_tokenAddr: string): Promise<BigNumber>;

    getBalanceLimitsEnabled(): Promise<BigNumber>;
  };
}
