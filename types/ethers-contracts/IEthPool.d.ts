/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IEthPoolInterface extends Interface {
  functions: {
    deposit: TypedFunctionDescription<{
      encode([_receiver]: [string]): string;
    }>;

    withdraw: TypedFunctionDescription<{
      encode([_value]: [BigNumberish]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([_spender, _value]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([_from, _to, _value]: [string, string, BigNumberish]): string;
    }>;

    transferToCelerWallet: TypedFunctionDescription<{
      encode([_from, _walletAddr, _walletId, _value]: [
        string,
        string,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    increaseAllowance: TypedFunctionDescription<{
      encode([_spender, _addedValue]: [string, BigNumberish]): string;
    }>;

    decreaseAllowance: TypedFunctionDescription<{
      encode([_spender, _subtractedValue]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{ encode([_owner]: [string]): string }>;

    allowance: TypedFunctionDescription<{
      encode([_owner, _spender]: [string, string]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Deposit: TypedEventDescription<{
      encodeTopics([receiver, value]: [string | null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class IEthPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IEthPool;
  attach(addressOrName: string): IEthPool;
  deployed(): Promise<IEthPool>;

  on(event: EventFilter | string, listener: Listener): IEthPool;
  once(event: EventFilter | string, listener: Listener): IEthPool;
  addListener(eventName: EventFilter | string, listener: Listener): IEthPool;
  removeAllListeners(eventName: EventFilter | string): IEthPool;
  removeListener(eventName: any, listener: Listener): IEthPool;

  interface: IEthPoolInterface;

  functions: {
    deposit(
      _receiver: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdraw(
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approve(
      _spender: string,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferToCelerWallet(
      _from: string,
      _walletAddr: string,
      _walletId: Arrayish,
      _value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(_owner: string): Promise<BigNumber>;

    allowance(_owner: string, _spender: string): Promise<BigNumber>;
  };

  deposit(
    _receiver: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdraw(
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approve(
    _spender: string,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    _from: string,
    _to: string,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferToCelerWallet(
    _from: string,
    _walletAddr: string,
    _walletId: Arrayish,
    _value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  increaseAllowance(
    _spender: string,
    _addedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  decreaseAllowance(
    _spender: string,
    _subtractedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string): Promise<BigNumber>;

  allowance(_owner: string, _spender: string): Promise<BigNumber>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Deposit(receiver: string | null, value: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    deposit(_receiver: string): Promise<BigNumber>;

    withdraw(_value: BigNumberish): Promise<BigNumber>;

    approve(_spender: string, _value: BigNumberish): Promise<BigNumber>;

    transferFrom(
      _from: string,
      _to: string,
      _value: BigNumberish
    ): Promise<BigNumber>;

    transferToCelerWallet(
      _from: string,
      _walletAddr: string,
      _walletId: Arrayish,
      _value: BigNumberish
    ): Promise<BigNumber>;

    increaseAllowance(
      _spender: string,
      _addedValue: BigNumberish
    ): Promise<BigNumber>;

    decreaseAllowance(
      _spender: string,
      _subtractedValue: BigNumberish
    ): Promise<BigNumber>;

    balanceOf(_owner: string): Promise<BigNumber>;

    allowance(_owner: string, _spender: string): Promise<BigNumber>;
  };
}
