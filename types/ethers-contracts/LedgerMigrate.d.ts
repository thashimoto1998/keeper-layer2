/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface LedgerMigrateInterface extends Interface {
  functions: {};

  events: {
    MigrateChannelFrom: TypedEventDescription<{
      encodeTopics([channelId, oldLedgerAddr]: [
        Arrayish | null,
        string | null
      ]): string[];
    }>;

    MigrateChannelTo: TypedEventDescription<{
      encodeTopics([channelId, newLedgerAddr]: [
        Arrayish | null,
        string | null
      ]): string[];
    }>;
  };
}

export class LedgerMigrate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): LedgerMigrate;
  attach(addressOrName: string): LedgerMigrate;
  deployed(): Promise<LedgerMigrate>;

  on(event: EventFilter | string, listener: Listener): LedgerMigrate;
  once(event: EventFilter | string, listener: Listener): LedgerMigrate;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): LedgerMigrate;
  removeAllListeners(eventName: EventFilter | string): LedgerMigrate;
  removeListener(eventName: any, listener: Listener): LedgerMigrate;

  interface: LedgerMigrateInterface;

  functions: {};

  filters: {
    MigrateChannelFrom(
      channelId: Arrayish | null,
      oldLedgerAddr: string | null
    ): EventFilter;

    MigrateChannelTo(
      channelId: Arrayish | null,
      newLedgerAddr: string | null
    ): EventFilter;
  };

  estimate: {};
}
