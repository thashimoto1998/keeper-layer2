/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface WalletTestHelperInterface extends Interface {
  functions: {
    create: TypedFunctionDescription<{
      encode([_owners, _operator, _nonce]: [
        string[],
        string,
        BigNumberish
      ]): string;
    }>;
  };

  events: {
    NewWallet: TypedEventDescription<{
      encodeTopics([walletId]: [null]): string[];
    }>;
  };
}

export class WalletTestHelper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): WalletTestHelper;
  attach(addressOrName: string): WalletTestHelper;
  deployed(): Promise<WalletTestHelper>;

  on(event: EventFilter | string, listener: Listener): WalletTestHelper;
  once(event: EventFilter | string, listener: Listener): WalletTestHelper;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): WalletTestHelper;
  removeAllListeners(eventName: EventFilter | string): WalletTestHelper;
  removeListener(eventName: any, listener: Listener): WalletTestHelper;

  interface: WalletTestHelperInterface;

  functions: {
    create(
      _owners: string[],
      _operator: string,
      _nonce: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  create(
    _owners: string[],
    _operator: string,
    _nonce: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    NewWallet(walletId: null): EventFilter;
  };

  estimate: {
    create(
      _owners: string[],
      _operator: string,
      _nonce: BigNumberish
    ): Promise<BigNumber>;
  };
}
