/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PausableInterface extends Interface {
  functions: {
    addPauser: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    isPauser: TypedFunctionDescription<{ encode([account]: [string]): string }>;

    renouncePauser: TypedFunctionDescription<{ encode([]: []): string }>;

    paused: TypedFunctionDescription<{ encode([]: []): string }>;

    pause: TypedFunctionDescription<{ encode([]: []): string }>;

    unpause: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Paused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;

    PauserAdded: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    PauserRemoved: TypedEventDescription<{
      encodeTopics([account]: [string | null]): string[];
    }>;

    Unpaused: TypedEventDescription<{
      encodeTopics([account]: [null]): string[];
    }>;
  };
}

export class Pausable extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Pausable;
  attach(addressOrName: string): Pausable;
  deployed(): Promise<Pausable>;

  on(event: EventFilter | string, listener: Listener): Pausable;
  once(event: EventFilter | string, listener: Listener): Pausable;
  addListener(eventName: EventFilter | string, listener: Listener): Pausable;
  removeAllListeners(eventName: EventFilter | string): Pausable;
  removeListener(eventName: any, listener: Listener): Pausable;

  interface: PausableInterface;

  functions: {
    addPauser(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isPauser(account: string): Promise<boolean>;

    renouncePauser(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    paused(): Promise<boolean>;

    pause(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    unpause(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  };

  addPauser(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isPauser(account: string): Promise<boolean>;

  renouncePauser(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  paused(): Promise<boolean>;

  pause(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  unpause(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {
    Paused(account: null): EventFilter;

    PauserAdded(account: string | null): EventFilter;

    PauserRemoved(account: string | null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimate: {
    addPauser(account: string): Promise<BigNumber>;

    isPauser(account: string): Promise<BigNumber>;

    renouncePauser(): Promise<BigNumber>;

    paused(): Promise<BigNumber>;

    pause(): Promise<BigNumber>;

    unpause(): Promise<BigNumber>;
  };
}
