/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, Signer } from "ethers";
import { Provider } from "ethers/providers";

import { IAccessSecretRegistry } from "./IAccessSecretRegistry";

export class IAccessSecretRegistryFactory {
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IAccessSecretRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IAccessSecretRegistry;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "did",
        type: "bytes32"
      }
    ],
    name: "settedDID",
    type: "event"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes",
        name: "_query",
        type: "bytes"
      }
    ],
    name: "getOutcome",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "int8",
        name: "_key",
        type: "int8"
      }
    ],
    name: "getDID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: false,
    inputs: [
      {
        internalType: "bytes32",
        name: "_did",
        type: "bytes32"
      },
      {
        internalType: "address",
        name: "_didRegistryAddress",
        type: "address"
      }
    ],
    name: "setDID",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "bytes32",
        name: "_did",
        type: "bytes32"
      }
    ],
    name: "getKeyDID",
    outputs: [
      {
        internalType: "int8",
        name: "",
        type: "int8"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address"
      },
      {
        internalType: "bytes32",
        name: "documentKeyId",
        type: "bytes32"
      }
    ],
    name: "checkPermissions",
    outputs: [
      {
        internalType: "bool",
        name: "permissionGranted",
        type: "bool"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  },
  {
    constant: true,
    inputs: [],
    name: "getGrantee",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    payable: false,
    stateMutability: "view",
    type: "function"
  }
];
